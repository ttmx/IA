from distanceMatrix import readDistanceMatrix, createSmallMatrix, distance
from math import exp
import sys
import random


class Solution:
    def __init__(self, list, cost):
        self.list = list
        self.cost = cost

    def get_list(self):
        return self.list

    def get_cost(self):
        return self.cost


class Problem:
    def __init__(self, big_matrix, city_list):
        self.small_matrix = createSmallMatrix(big_matrix, city_list)
        self.init_cost = self.init_solution().get_cost()

    def init_solution(self):
        total_distance = 0
        for city_n in range(len(self.small_matrix) - 1):
            total_distance += distance(self.small_matrix, self.small_matrix[0][city_n],
                                       self.small_matrix[0][city_n + 1])
        return Solution(self.small_matrix[0], total_distance)


    def decay(self, temperature):
        return int(temperature * 0.99)

    def n_iter(self, n_iter):
        return n_iter - 1

    def should_stop(self, temp):
        return temp < 1

    def init_temp(self):
        min_dist = float("inf")
        max_dist = 0
        print(self.small_matrix)
        for line in self.small_matrix[1]:
            for elem in line:
                if min_dist > elem:
                    min_dist = elem
                if max_dist < elem:
                    max_dist = elem
        return (max_dist - min_dist) * 2

    def get_neighbor(self, solution):
        list = solution.get_list()
        i = random.randint(0, len(list) - 1)
        j = random.randint(0, len(list) - 2)
        if i <= j:
            j += 1
        nice_list = list
        for a in range(0, (i + 1) % (len(nice_list))):
            nice_list.append(nice_list.pop(0))
        j_list = nice_list[:(j - i) % (len(nice_list))]
        rest_list = nice_list[(j - i) % (len(nice_list)):]
        j_list.reverse()

        end_list = j_list + rest_list
        delta = distance(self.small_matrix, list[i], list[j]) + \
                distance(self.small_matrix, list[(i + 1) % len(list)], list[(j + 1) % len(list)]) - \
                distance(self.small_matrix, list[i % len(list)], list[(i + 1) % len(list)]) - \
                distance(self.small_matrix, list[j % len(list)], list[(j + 1) % len(list)])

        return Solution(end_list, solution.get_cost() + delta)


class Solver:
    def __init__(self, problem):
        self.problem = problem
        self.itcount = 0
        self.initial_cost = problem.init_cost
        self.end_cost = -1

    def solve(self, n_iter):
        corrente = self.problem.init_solution()
        melhor = corrente
        t = self.problem.init_temp()
        while True:
            for n in range(1, n_iter):
                proximo = self.problem.get_neighbor(corrente)
                d = proximo.get_cost() - corrente.get_cost()
                if d < 0:
                    corrente = proximo
                if corrente.get_cost() < melhor.get_cost():
                    melhor = corrente
                    self.end_cost = melhor.get_cost()
                else:
                    if t != 0 and exp(-d / t) < random.random():
                        corrente = proximo
                self.itcount += 1
            if self.problem.should_stop(t):
                return melhor
            n_iter = self.problem.n_iter(n_iter)
            t = self.problem.decay(t)


orig_matrix = readDistanceMatrix("distancias.txt")

orig_cities = []
for i in sys.argv:
    orig_cities.append(i)

orig_cities.remove(sys.argv[0])
prob = Problem(orig_matrix, orig_cities)
print(orig_cities)

solv = Solver(prob)
print(solv.solve(1000).get_list())
print(solv.initial_cost)
print(solv.end_cost)
